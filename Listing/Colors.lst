C51 COMPILER V9.02   COLORS                                                                04/23/2018 10:18:57 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE COLORS
OBJECT MODULE PLACED IN ..\Output\Colors.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\Code\DirverCode\Colors.C BROWSE INCDIR(..\Code\DeveloperCode\inc;..\Code
                    -\DirverCode\inc;..\Code\Public\inc) DEBUG OBJECTEXTEND PRINT(..\Listing\Colors.lst) OBJECT(..\Output\Colors.obj)

line level    source

   1          /* *******************************************************************************************
   2          // Author: biu~
   3          // Last Date:2018/04/23
   4          /* ******************************************************************************************* */
   5          #include "Colors.H"
   6          
   7          #define PWM_DUTY_MAX    255 // 0~255    PWMÖÜÆÚ, ×î´ó255
   8          #define PWM_ON          0   // ¶¨ÒåÕ¼¿Õ±ÈµÄµçÆ½, 1 »ò 0
   9          #define PWM_OFF         (!PWM_ON)
  10          
  11          #define PWM_BLUE    0
  12          #define PWM_GREEN   1
  13          #define PWM_RED     2
  14          
  15          #define PWM_ACCELERATE1 (PWM_DUTY_MAX/10*9)
  16          #define PWM_ACCELERATE2 (PWM_DUTY_MAX/10*7)
  17          sbit Color_Blue = P3^1;
  18          sbit Color_Green = P3^2;
  19          sbit Color_Red = P3^3;
  20          data u8 PwmDuty[3];
  21          /* *******************************************************************************************
  22          // ¶¨Ê±Æ÷PWMÊä³ö³õÊ¼»¯£º
  23          /* ******************************************************************************************* */
  24          void TimerPWM_Init()
  25          {
  26   1          PwmDuty[PWM_BLUE] = 0x00;
  27   1          PwmDuty[PWM_GREEN] = 0x00;
  28   1          PwmDuty[PWM_RED] = 0x00;
  29   1      }
  30                    
  31          /* *******************************************************************************************
  32          // ¶¨Ê±Æ÷¿ØÖÆPWMÊä³ö 
  33          /* ******************************************************************************************* */
  34          void TimerPWM()
  35          {
  36   1          static data u8 temp_pwm_duty = 0;
  37   1          if(temp_pwm_duty >= PwmDuty[PWM_BLUE]) Color_Blue = PWM_OFF;       //ÅÐ¶ÏPWMÕ¼¿Õ±ÈÊÇ·ñ½áÊø£»
  38   1          if(temp_pwm_duty >= PwmDuty[PWM_GREEN]) Color_Green = PWM_OFF;
  39   1          if(temp_pwm_duty >= PwmDuty[PWM_RED]) Color_Red = PWM_OFF;
  40   1              
  41   1          if(++temp_pwm_duty == PWM_DUTY_MAX)                 //PWMÖÜÆÚ½áÊø£¬ÖØÐÂ¿ªÊ¼ÐÂµÄÖÜÆÚ£»
  42   1          {
  43   2              temp_pwm_duty = 0;
  44   2              if (PwmDuty[PWM_BLUE] != 0)                     //ÔÚPWMÕ¼¿ÕÎª0Ê±²»¿ªÆôµÆ¹â£»
  45   2                  Color_Blue = PWM_ON;
  46   2              if (PwmDuty[PWM_GREEN] != 0)
  47   2                  Color_Green = PWM_ON;
  48   2              if (PwmDuty[PWM_RED] != 0)
  49   2                  Color_Red = PWM_ON;
  50   2          }
  51   1      }
  52          
  53          /* *******************************************************************************************
  54          // PWMÕ¼¿Õ¸Ä±ä¹¦ÄÜº¯Êý£ºÄ³_bit£¨ÑÕÉ«£©Õ¼¿Õ±ÈÔö¼ÓÖÁ temp_pwm
C51 COMPILER V9.02   COLORS                                                                04/23/2018 10:18:57 PAGE 2   

  55          /* ******************************************************************************************* */
  56          bit TimerPWM_Duty_Add(u8 _bit, u8 temp_pwm)
  57          {
  58   1          if (temp_pwm > PwmDuty[_bit])
  59   1          {
  60   2              if (PwmDuty[_bit] > PWM_ACCELERATE2 && PwmDuty[_bit] < 0xFD)   //ÁÁ¶È½Ï¸ßÊ±£¬ÓÉÓÚÈËÑÛ¶Ô½ÏÁÁµÄµÆ¹âÁ
             -Á¶È¸Ä±ä¸ÐÊÜ²»Ã÷ÏÔ£¬½øÐÐ¼ÓËÙ´¦Àí£»
  61   2              {
  62   3                  PwmDuty[_bit] += 3;
  63   3              }
  64   2              else if (PwmDuty[_bit] > PWM_ACCELERATE1 && PwmDuty[_bit] < 0xFE)
  65   2              {
  66   3                  PwmDuty[_bit] += 2;
  67   3              }
  68   2              else
  69   2              {
  70   3                  PwmDuty[_bit] ++;
  71   3              }
  72   2          }  
  73   1          else 
  74   1          {
  75   2              return TRUE;
  76   2          }  
  77   1          return FALSE;
  78   1      }
  79          
  80          /* *******************************************************************************************
  81          // PWMÕ¼¿Õ¸Ä±ä¹¦ÄÜº¯Êý£ºÄ³_bit£¨ÑÕÉ«£©Õ¼¿Õ±È¼õÖÁ temp_pwm
  82          /* ******************************************************************************************* */
  83          bit TimerPWM_Duty_Dec(u8 _bit, u8 temp_pwm)
  84          {
  85   1          if (temp_pwm < PwmDuty[_bit])
  86   1          {
  87   2              if (PwmDuty > PWM_ACCELERATE2 && PwmDuty[_bit] > 3) 
  88   2              {
  89   3                  PwmDuty[_bit] -= 3;
  90   3              }
  91   2              else if (PwmDuty[_bit] > PWM_ACCELERATE1 && PwmDuty[_bit] > 2)
  92   2              {
  93   3                  PwmDuty[_bit] -= 2;
  94   3              }
  95   2              else
  96   2              {
  97   3                  PwmDuty[_bit] --;
  98   3              }
  99   2          }
 100   1          else 
 101   1          {
 102   2              return TRUE;
 103   2          }  
 104   1          return FALSE;
 105   1      }
 106          
 107          #define DEC 0
 108          #define ADD 1
 109          
 110          #define BLUE_RED    1
 111          #define BLUE_GREEN  2
 112          #define RED_GREEN   3
 113          /* *******************************************************************************************
 114          // ¶¨Ê±Æ÷ÑÓÊ±º¯Êý 
 115          // ²ÎÊý1Îªx¸ö100MS£¬×î´óÑÓÊ±²»³¬¹ý25.5S£»
C51 COMPILER V9.02   COLORS                                                                04/23/2018 10:18:57 PAGE 3   

 116          // ²ÎÊý2Îª»ù×¼Ê±¼äÎª¶àÉÙºÁÃë£¬SLOWÄ£Ê½ÓëFASTÄ£Ê½¾ùÓÐ×Ô¼ºµÄ»ù×¼Ê±³¤£»
 117          /* ******************************************************************************************* */
 118          static bit TimerDelay(u8 x_100ms, u8 base_ms)
 119          {
 120   1          static u16 Cp;
 121   1          static u8 x_Cp;
 122   1          if (++Cp >= (100 / base_ms))
 123   1          {
 124   2              Cp = 0;
 125   2              x_Cp ++;
 126   2              if (x_100ms <= x_Cp)
 127   2              {
 128   3                  x_Cp = 0;
 129   3                  return TRUE;
 130   3              }
 131   2          }
 132   1          return FALSE;  
 133   1      }
 134          /* *******************************************************************************************
 135          // ¶à£¨Ë«£©ÑÕÉ«ÁÁ¶È¿ØÖÆ
 136          /* ******************************************************************************************* */
 137          static bit conColorsPWM(u8 colors, bit color1_dec_or_inc, u8 temp_color1, bit color2_dec_or_inc, u8 temp_c
             -olor2)
 138          {
 139   1          auto u8 count = 0;
 140   1          switch (colors)
 141   1          {
 142   2              case BLUE_RED:
 143   2              {
 144   3                  if ((color1_dec_or_inc == DEC) ? TimerPWM_Duty_Dec(PWM_BLUE, temp_color1) : TimerPWM_Duty_Add(
             -PWM_BLUE, temp_color1))
 145   3                  {
 146   4                      count ++;
 147   4                  }
 148   3                  if ((color2_dec_or_inc == DEC) ? TimerPWM_Duty_Dec(PWM_RED, temp_color2) : TimerPWM_Duty_Add(P
             -WM_RED, temp_color2))
 149   3                  {
 150   4                      count ++;
 151   4                  }
 152   3              }
 153   2                  break;
 154   2              case BLUE_GREEN:
 155   2              {
 156   3                  if ((color1_dec_or_inc == DEC) ? TimerPWM_Duty_Dec(PWM_BLUE, temp_color1) : TimerPWM_Duty_Add(
             -PWM_BLUE, temp_color1))
 157   3                  {
 158   4                      count ++;
 159   4                  }
 160   3                  if ((color2_dec_or_inc == DEC) ? TimerPWM_Duty_Dec(PWM_GREEN, temp_color2) : TimerPWM_Duty_Add
             -(PWM_GREEN, temp_color2))
 161   3                  {
 162   4                      count ++;
 163   4                  }
 164   3              }
 165   2                  break;
 166   2              case RED_GREEN:
 167   2              {
 168   3                  if ((color1_dec_or_inc == DEC) ? TimerPWM_Duty_Dec(PWM_RED, temp_color1) : TimerPWM_Duty_Add(P
             -WM_RED, temp_color1))
 169   3                  {
 170   4                      count ++;
 171   4                  }
C51 COMPILER V9.02   COLORS                                                                04/23/2018 10:18:57 PAGE 4   

 172   3                  if ((color2_dec_or_inc == DEC) ? TimerPWM_Duty_Dec(PWM_GREEN, temp_color2) : TimerPWM_Duty_Add
             -(PWM_GREEN, temp_color2))
 173   3                  {
 174   4                      count ++;
 175   4                  }
 176   3              }
 177   2                  break;
 178   2              default:
 179   2                  break;
 180   2          }
 181   1          return ((count == 2) ? TRUE : FALSE);
 182   1      }
 183          
 184          /* *******************************************************************************************
 185          // ËùÓÐÑÕÉ«½¥Ï¨
 186          /* ******************************************************************************************* */
 187          static bit conAllColorsOff()
 188          {
 189   1          auto u8 count = 0;
 190   1          if (TimerPWM_Duty_Dec(PWM_BLUE, 0))
 191   1          {
 192   2              count ++;
 193   2          }
 194   1          if (TimerPWM_Duty_Dec(PWM_GREEN, 0))
 195   1          {
 196   2              count ++;
 197   2          }
 198   1          if (TimerPWM_Duty_Dec(PWM_RED, 0))
 199   1          {
 200   2              count ++;
 201   2          }
 202   1          return ((count == 3) ? TRUE : FALSE);
 203   1      }
 204          
 205          #define SLOW 0
 206          #define FAST 1
 207          
 208          //bit conSpeed = SLOW;
 209          bit conSpeed = SLOW;
 210          /* *******************************************************************************************
 211          // PWMÕ¼¿Õ±È¸Ä±ä¿ØÖÆ£ºÂýËÙ
 212          /* ******************************************************************************************* */
 213          void Con_TimerPWM_Duty_Slow()
 214          {
 215   1          static u8 mode = 0;         //µ±Ç°Ä£Ê½£»
 216   1          if (conSpeed == SLOW)
 217   1          {
 218   2              switch (mode)
 219   2              {
 220   3      //            case 0: if (TimerPWM_Duty_Add(PWM_BLUE, PWM_DUTY_MAX) == 1) {mode ++;}
 221   3                  case 0: if (TimerPWM_Duty_Add(PWM_BLUE, PWM_DUTY_MAX)) {mode ++;}
 222   3                      break; 
 223   3                  case 1: if (TimerPWM_Duty_Dec(PWM_BLUE, 0))
 224   3                              if (TimerDelay(2, TIME_BASE_2ND/1000)) {mode ++;}   //µ¥À¶µÆºôÎüÒ»´Î£»
 225   3                      break; 
 226   3                  case 2: if (TimerPWM_Duty_Add(PWM_RED, PWM_DUTY_MAX))           //ºìµÆ½¥ÁÁ£¬ºóÖð½¥±ä×Ï£»
 227   3                              if (TimerPWM_Duty_Add(PWM_BLUE, PWM_DUTY_MAX)) {mode ++;}
 228   3                      break; 
 229   3                  case 3: if (TimerPWM_Duty_Dec(PWM_RED, 0))                      //×ÏµÆ½¥À¶£¬ºóÖð½¥±äÎªµåÀ¶£¨»ò
             -Õß½Ð×öÇà£¿£©£¬ÔÙºóÎªÂÌ£»
 230   3                              if (TimerPWM_Duty_Add(PWM_GREEN, PWM_DUTY_MAX))
 231   3                                  if (TimerPWM_Duty_Dec(PWM_BLUE, 0)) {mode ++;}      
C51 COMPILER V9.02   COLORS                                                                04/23/2018 10:18:57 PAGE 5   

 232   3                      break;                                                          
 233   3                  case 4: if (TimerPWM_Duty_Add(PWM_RED, PWM_DUTY_MAX))           //ÂÌ½¥±äÎª»Æ£¬ºó½¥±äÎªºì£¬½¥Ï¨
             -£»
 234   3                              if (TimerPWM_Duty_Dec(PWM_GREEN, 0)) {mode ++;}          
 235   3                      break;
 236   3                  case 5: if (TimerPWM_Duty_Dec(PWM_RED, 0))                       //ºì½¥Ï¨£¬ÇÐ»»Îª¿ìËÙ±ä»»£»
 237   3                              if (TimerDelay(2, TIME_BASE_2ND/1000)) {mode ++; conSpeed = FAST;}
 238   3                      break;
 239   3                  default:if (conAllColorsOff()) {mode = 0;}
 240   3                      break;
 241   3              }
 242   2          }
 243   1      }
 244          
 245          /* *******************************************************************************************
 246          // PWMÕ¼¿Õ±È¸Ä±ä¿ØÖÆ£º¿ìËÙ
 247          /* ******************************************************************************************* */
 248          void Con_TimerPWM_Duty_Fast()
 249          {
 250   1          static u8 mode = 0;         //µ±Ç°Ä£Ê½£»
 251   1          if (conSpeed == FAST)
 252   1          {
 253   2      //#define BLUE_RED    1
 254   2      //#define BLUE_GREEN  2
 255   2      //#define RED_GREEN   3
 256   2              switch (mode)
 257   2              {
 258   3                  case 0: if (TimerPWM_Duty_Add(PWM_GREEN, PWM_DUTY_MAX)) {mode ++;}
 259   3                      break;
 260   3                  case 1: if (TimerPWM_Duty_Dec(PWM_GREEN, PWM_DUTY_MAX/3*2)) 
 261   3                              if (TimerPWM_Duty_Add(PWM_RED, PWM_DUTY_MAX))
 262   3                                  if (TimerDelay(3, TIME_BASE_3RD/1000)) {mode ++;}
 263   3                      break;
 264   3                  case 2: if (conColorsPWM(RED_GREEN, DEC, PWM_DUTY_MAX/3, DEC, 0))
 265   3                              if (TimerPWM_Duty_Add(PWM_BLUE, PWM_DUTY_MAX/3)) {mode ++;}
 266   3                      break;
 267   3                  case 3: if (conColorsPWM(BLUE_RED, ADD, PWM_DUTY_MAX, ADD, PWM_DUTY_MAX/3*2))
 268   3                              if (TimerDelay(3, TIME_BASE_3RD/1000)) {mode ++;}
 269   3                      break;
 270   3                  case 4: if (conColorsPWM(BLUE_RED, DEC, PWM_DUTY_MAX/3, DEC, 0)) {mode ++;}
 271   3                      break;
 272   3                  case 5: if (conColorsPWM(BLUE_GREEN, ADD, PWM_DUTY_MAX, ADD, PWM_DUTY_MAX))
 273   3                              if (TimerDelay(3, TIME_BASE_3RD/1000)) {mode ++;}
 274   3                      break;
 275   3                  case 6: if (conColorsPWM(BLUE_GREEN, DEC, PWM_DUTY_MAX/5, DEC, PWM_DUTY_MAX/5))
 276   3                              if (TimerPWM_Duty_Add(PWM_RED, PWM_DUTY_MAX))
 277   3                                  if (TimerDelay(3, TIME_BASE_3RD/1000)) {mode ++;}
 278   3                      break;
 279   3                  case 7: if (conAllColorsOff())
 280   3                              if (TimerDelay(3, TIME_BASE_3RD/1000)) {mode ++; conSpeed = SLOW;}
 281   3                      break;
 282   3                                   
 283   3      //            case 4: if(conColorsPWM(RED_GREEN, ADD, 255, ADD, 240)) {mode ++;}
 284   3      //                break;
 285   3      //            case 5: if(conColorsPWM(RED_GREEN, DEC, 230, DEC, 140)) {mode ++;}
 286   3      //                break;
 287   3      //            case 6: if(conColorsPWM(BLUE_GREEN, ADD, 255, ADD, 230)) {mode ++;}
 288   3      //                break;
 289   3                  default:if (conAllColorsOff()) {mode = 0;}
 290   3                      break;
 291   3              }
 292   2          }
C51 COMPILER V9.02   COLORS                                                                04/23/2018 10:18:57 PAGE 6   

 293   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    799    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
